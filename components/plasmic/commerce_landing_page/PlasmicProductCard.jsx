// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: be4gyluQ_9OJzR
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component
import Price from "../../Price"; // plasmic-import: t1p7ZNjiFGWe7C/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_landing_page.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: be4gyluQ_9OJzR/css

export const PlasmicProductCard__VariantProps = new Array("small");

export const PlasmicProductCard__ArgProps = new Array(
  "tags",
  "children",
  "link",
  "rating",
  "img",
  "dollars",
  "cents"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          img: {
            src: "/plasmic/commerce_landing_page/images/shoe14.png",
            fullWidth: 840,
            fullHeight: 840,
            aspectRatio: undefined
          }
        },
        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "small",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.small : undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);
  const [$queries, setDollarQueries] = React.useState({});
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootsmall]: hasVariant($state, "small", "small") }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linksmall]: hasVariant($state, "small", "small")
        })}
        component={Link}
        href={args.link}
        platform={"nextjs"}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"256px"}
          displayWidth={"auto"}
          src={args.img}
        />

        {(
          hasVariant($state, "small", "small") && triggers.hover_root
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___0CEB, {
              [sty.freeBoxsmall___0CEBudi3Z]: hasVariant(
                $state,
                "small",
                "small"
              )
            })}
          />
        ) : null}
        {(hasVariant($state, "small", "small") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qjahZ, {
              [sty.freeBoxsmall__qjahZudi3Z]: hasVariant(
                $state,
                "small",
                "small"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox___6E0Wf)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Button colors={"lightGray"} size={"small"}>
                    {"New"}
                  </Button>
                ),

                value: args.tags
              })}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Rating
                    className={classNames("__wab_instance", sty.rating__mmCpU)}
                  />
                ),

                value: args.rating
              })}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e7RnT)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kwlSr
                      )}
                    >
                      {"Product name"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dd05
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </React.Fragment>
                ),

                value: args.children
              })}
            </p.Stack>

            <Price
              data-plasmic-name={"price"}
              data-plasmic-override={overrides.price}
              cents={p.renderPlasmicSlot({
                defaultContents: "99",
                value: args.cents
              })}
              className={classNames("__wab_instance", sty.price)}
              dollars={p.renderPlasmicSlot({
                defaultContents: "88",
                value: args.dollars
              })}
            />
          </p.Stack>
        ) : null}
      </p.PlasmicLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "img", "price"],
  link: ["link", "img", "price"],
  img: ["img"],
  price: ["price"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    price: makeNodeComponent("price"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
